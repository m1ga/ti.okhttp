/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Titanium SDK
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.okhttp;

import android.os.Build;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.util.TiPlatformHelper;

import java.io.File;
import java.io.IOException;
import java.net.SocketTimeoutException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import okhttp3.Cache;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;


@Kroll.module(name = "TiOkhttp", id = "ti.okhttp")
public class TiOkhttpModule extends KrollModule {

    // Standard Debugging variables
    private static final String LCAT = "TiOkhttpModule";
    private static final boolean DBG = TiConfig.LOGD;
    private static final String TITANIUM_USER_AGENT =
            "Titanium SDK/" + TiApplication.getInstance().getTiBuildVersion() + " (" + Build.MODEL
                    + "; Android API Level: " + Build.VERSION.SDK_INT + "; "
                    + TiPlatformHelper.getInstance().getLocale() + ";)";
    private final OkHttpClient client = new OkHttpClient();
    private KrollFunction clbSucess;
    private KrollFunction clbError;

    public TiOkhttpModule() {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
    }


    private Request parseRequest(@Kroll.argument(optional = true) KrollDict data, RequestBody body) {
        Request.Builder requestBuilder = new Request.Builder()
                .header("User-Agent", TITANIUM_USER_AGENT)
                .url(data.getString("url"));

        if (data.containsKeyAndNotNull("header")) {
            Map<String, String> headerData = (HashMap) data.get("header");
            for (Map.Entry<String, String> item : headerData.entrySet()) {
                requestBuilder.removeHeader(item.getKey());
                requestBuilder.addHeader(item.getKey(), item.getValue());
            }
        }

        if (data.containsKeyAndNotNull("success")) {
            clbSucess = (KrollFunction) data.get("success");
        }
        if (data.containsKeyAndNotNull("error")) {
            clbError = (KrollFunction) data.get("error");
        }

        if (body != null) {
            requestBuilder.post(body);
        }

        return requestBuilder.build();
    }

    private OkHttpClient.Builder parseData(KrollDict data) {
        OkHttpClient.Builder clientBuilder = client.newBuilder();
        if (data.containsKeyAndNotNull("connectTimeout")) {
            clientBuilder.connectTimeout(data.getInt("connectTimeout"), TimeUnit.MILLISECONDS);
        }
        if (data.containsKeyAndNotNull("readTimeout")) {
            clientBuilder.readTimeout(data.getInt("readTimeout"), TimeUnit.MILLISECONDS);
        }
        if (data.containsKeyAndNotNull("writeTimeout")) {
            clientBuilder.writeTimeout(data.getInt("writeTimeout"), TimeUnit.MILLISECONDS);
        }

        if (data.containsKeyAndNotNull("caching") && data.getBoolean("caching")) {
            int cacheSize = 10;
            if (data.containsKeyAndNotNull("cacheSize")) {
                cacheSize = data.getInt("cacheSize");
            }
            File file = TiApplication.getInstance().getTiTempDir().getAbsoluteFile();
            if (file.exists()) {
                try {
                    clientBuilder.cache(CacheResponse(file, cacheSize));
                } catch (Exception exception) {
                    //
                    Log.e(LCAT, "error: " + exception.getCause());
                }
            }
        }
        return clientBuilder;
    }

    // Methods
    @Kroll.method
    public void get(KrollDict data) {
        if (!data.containsKeyAndNotNull("url")) {
            Log.e(LCAT, "Please set an URL");
            return;
        }
        OkHttpClient.Builder clientBuilder = parseData(data);
        Request request = parseRequest(data, null);

        Log.d(LCAT, "HTTP request to: " + data.getString("url"));
        clientBuilder.build().newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                createErrorEvent(e);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        createReturnEvent(response.headers(), response.body(), response, data);
                    } else {
                        if (clbError != null) {
                            clbError.callAsync(getKrollObject(), new KrollDict());
                        }
                        fireEvent("error", new KrollDict());
                    }
                } catch (Exception exception) {
                    Log.e(LCAT, exception.toString());
                }
            }
        });
    }

    private Cache CacheResponse(File cacheDirectory, int value) throws Exception {
        int cacheSize = value * 1024 * 1024; // MiB
        Cache cache = new Cache(cacheDirectory, cacheSize);
        return cache;
    }

    private void createErrorEvent(IOException e) {
        KrollDict kd = new KrollDict();
        if (e instanceof SocketTimeoutException) {
            kd.put("timeout", true);
        } else {
            kd.put("timeout", false);
        }
        kd.put("message", e.toString());
        fireEvent("error", kd);
        if (clbError != null) {
            clbError.callAsync(getKrollObject(), kd);
        }
    }

    private void createReturnEvent(Headers header, ResponseBody body, Response response, KrollDict data) {
        KrollDict output = new KrollDict();
        output.put("header", header.toString());
        try {
            output.put("body", body.string());
        } catch (Exception exception) {
            output.put("body", "");
        }
        boolean isCached = false;
        String networkResponse = "";

        if (response != null && response.cacheResponse() != null) {
            isCached = true;
        }
        if (response != null && response.networkResponse() != null) {
            networkResponse = response.networkResponse().toString();
        }
        output.put("url", data.getString("url"));
        output.put("data", data.getKrollDict("data"));
        output.put("cached", isCached);
        output.put("networkResponse", networkResponse);
        output.put("protocol", response.protocol().toString());

        if (clbSucess != null) {
            clbSucess.callAsync(getKrollObject(), output);
        }
        fireEvent("data", output);
    }

    @Kroll.method
    public void post(KrollDict data) {
        if (!data.containsKeyAndNotNull("url")) {
            Log.e(LCAT, "Please set an URL");
            return;
        }
        OkHttpClient.Builder clientBuilder = parseData(data);

        MediaType JSON = MediaType.parse("application/json");
        String postBody = "";
        if (data.get("data") instanceof HashMap) {
            postBody = TiConvert.toJSON((HashMap<String, Object>) data.get("data")).toString();
        } else {
            postBody = data.getString("data");
        }

        RequestBody body = RequestBody.create(postBody, JSON);
        Request request = parseRequest(data, body);

        clientBuilder.build().newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                createErrorEvent(e);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                if (response.isSuccessful()) {
                    createReturnEvent(response.headers(), response.body(), response, data);
                } else {
                    if (clbError != null) {
                        clbError.callAsync(getKrollObject(), new KrollDict());
                    }
                    fireEvent("error", new KrollDict());
                }
            }
        });
    }
}
