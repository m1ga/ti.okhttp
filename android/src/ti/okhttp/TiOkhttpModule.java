/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Titanium SDK
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.okhttp;

import android.os.Build;

import androidx.annotation.NonNull;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBlob;
import org.appcelerator.titanium.TiFileProxy;
import org.appcelerator.titanium.io.TiBaseFile;
import org.appcelerator.titanium.io.TiResourceFile;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.util.TiMimeTypeHelper;
import org.appcelerator.titanium.util.TiPlatformHelper;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.SocketTimeoutException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import okhttp3.Cache;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;


@Kroll.module(name = "TiOkhttp", id = "ti.okhttp")
public class TiOkhttpModule extends KrollModule {

    // Standard Debugging variables
    private static final String LCAT = "TiOkhttpModule";
    private static final boolean DBG = TiConfig.LOGD;
    private static final String TITANIUM_USER_AGENT = "Titanium SDK/" + TiApplication.getInstance().getTiBuildVersion() + " (" + Build.MODEL + "; Android API Level: " + Build.VERSION.SDK_INT + "; " + TiPlatformHelper.getInstance().getLocale() + ";)";
    private final OkHttpClient client = new OkHttpClient();
    private KrollFunction clbSuccess;
    private KrollFunction clbError;

    public TiOkhttpModule() {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
    }


    private Request parseRequest(@Kroll.argument(optional = true) KrollDict data, RequestBody body) {
        Request.Builder requestBuilder = new Request.Builder().header("User-Agent", TITANIUM_USER_AGENT).url(data.getString("url"));

        if (data.containsKeyAndNotNull("header")) {
            Map<String, String> headerData = (HashMap) data.get("header");
            for (Map.Entry<String, String> item : headerData.entrySet()) {
                requestBuilder.removeHeader(item.getKey());
                requestBuilder.addHeader(item.getKey(), item.getValue());
            }
        }

        if (data.containsKeyAndNotNull("success")) {
            clbSuccess = (KrollFunction) data.get("success");
        }
        if (data.containsKeyAndNotNull("error")) {
            clbError = (KrollFunction) data.get("error");
        }

        if (body != null) {
            requestBuilder.post(body);
        }

        return requestBuilder.build();
    }

    private OkHttpClient.Builder parseData(KrollDict data) {
        OkHttpClient.Builder clientBuilder = client.newBuilder();
        if (data.containsKeyAndNotNull("connectTimeout")) {
            clientBuilder.connectTimeout(data.getInt("connectTimeout"), TimeUnit.MILLISECONDS);
        }
        if (data.containsKeyAndNotNull("readTimeout")) {
            clientBuilder.readTimeout(data.getInt("readTimeout"), TimeUnit.MILLISECONDS);
        }
        if (data.containsKeyAndNotNull("writeTimeout")) {
            clientBuilder.writeTimeout(data.getInt("writeTimeout"), TimeUnit.MILLISECONDS);
        }

        if (data.containsKeyAndNotNull("caching") && data.getBoolean("caching")) {
            int cacheSize = 10;
            if (data.containsKeyAndNotNull("cacheSize")) {
                cacheSize = data.getInt("cacheSize");
            }
            File file = TiApplication.getInstance().getTiTempDir().getAbsoluteFile();
            if (file.exists()) {
                try {
                    clientBuilder.cache(CacheResponse(file, cacheSize));
                } catch (Exception exception) {
                    //
                    Log.e(LCAT, "error: " + exception.getCause());
                }
            }
        } else {
            // disable cache by default
            clientBuilder.cache(null);
        }
        return clientBuilder;
    }

    // Methods
    @Kroll.method
    public void get(KrollDict data) {
        if (!data.containsKeyAndNotNull("url")) {
            Log.e(LCAT, "Please set an URL");
            return;
        }
        OkHttpClient.Builder clientBuilder = parseData(data);
        Request request = parseRequest(data, null);

        Log.d(LCAT, "HTTP request to: " + data.getString("url"));
        clientBuilder.build().newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                createErrorEvent(e);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        createReturnEvent(response.headers(), response.body(), response, data);
                    } else {
                        if (clbError != null) {
                            clbError.callAsync(getKrollObject(), new KrollDict());
                        }
                        fireEvent("error", new KrollDict());
                    }
                } catch (Exception exception) {
                    Log.e(LCAT, exception.toString());
                }
            }
        });
    }

    private Cache CacheResponse(File cacheDirectory, int value) throws Exception {
        int cacheSize = value * 1024 * 1024; // MiB
        return new Cache(cacheDirectory, cacheSize);
    }

    private void createErrorEvent(IOException e) {
        KrollDict kd = new KrollDict();
        if (e instanceof SocketTimeoutException) {
            kd.put("timeout", true);
        } else {
            kd.put("timeout", false);
        }
        kd.put("message", e.toString());
        fireEvent("error", kd);
        if (clbError != null) {
            clbError.callAsync(getKrollObject(), kd);
        }
    }

    private void createReturnEvent(Headers header, ResponseBody body, Response response, KrollDict data) {
        KrollDict output = new KrollDict();
        output.put("header", header.toString());
        try {
            output.put("body", body.string());
        } catch (Exception exception) {
            output.put("body", "");
        }
        boolean isCached = false;
        String networkResponse = "";

        if (response != null && response.cacheResponse() != null) {
            isCached = true;
        }
        if (response != null && response.networkResponse() != null) {
            networkResponse = response.networkResponse().toString();
        }
        output.put("url", data.getString("url"));
        output.put("data", data.getKrollDict("data"));
        output.put("cached", isCached);
        output.put("networkResponse", networkResponse);
        output.put("protocol", response.protocol().toString());

        if (clbSuccess != null) {
            clbSuccess.callAsync(getKrollObject(), output);
        }
        fireEvent("data", output);
    }

    @Kroll.method
    public void post(KrollDict data) {
        if (!data.containsKeyAndNotNull("url")) {
            Log.e(LCAT, "Please set an URL");
            return;
        }
        OkHttpClient.Builder clientBuilder = parseData(data);

        String postBody = "";
        boolean isMultipart = false;
        if (data.get("data") instanceof HashMap) {

            HashMap<String, Object> localData = (HashMap<String, Object>) data.get("data");
            for (String key : localData.keySet()) {
                Object value = localData.get(key);
                if (value != null) {
                    if (value instanceof TiFileProxy) {
                        value = ((TiFileProxy) value).getBaseFile();
                    }
                    if (value instanceof TiBaseFile || value instanceof TiBlob) {
                        isMultipart = true;
                        break;
                    }
                }
            }

            if (!isMultipart) {
                postBody = TiConvert.toJSON(localData).toString();
            }
        } else {
            postBody = data.getString("data");
        }

        RequestBody body;
        if (isMultipart) {
            MultipartBody.Builder multipartBody = new MultipartBody.Builder();
            multipartBody.setType(MultipartBody.FORM);
            HashMap<String, Object> localData = (HashMap<String, Object>) data.get("data");
            for (String key : localData.keySet()) {
                Object value = localData.get(key);

                if (value != null) {

                    if (value instanceof TiFileProxy) {
                        value = ((TiFileProxy) value).getBaseFile();
                    }

                    if (value instanceof TiBaseFile || value instanceof TiBlob) {
                        File file = null;
                        if (value instanceof TiBaseFile && !(value instanceof TiResourceFile)) {
                            TiBaseFile baseFile = (TiBaseFile) value;
                            file = baseFile.getNativeFile();
                        } else if (value instanceof TiBlob || value instanceof TiResourceFile) {
                            TiBlob blob;
                            if (value instanceof TiBlob) {
                                blob = (TiBlob) value;
                            } else {
                                try {
                                    blob = ((TiResourceFile) value).read();
                                } catch (IOException e) {
                                    throw new RuntimeException(e);
                                }
                            }
                            String mimeType = blob.getMimeType();
                            try {
                                file = File.createTempFile(
                                        "tixhr",
                                        "." + TiMimeTypeHelper.getFileExtensionFromMimeType(mimeType, "txt"),
                                        TiApplication.getInstance().getTiTempDir());
                            } catch (IOException ignored) {
                            }
                            try {
                                createFileFromBlob(blob, file);
                            } catch (IOException ignored) {
                            }
                        }

                        if (file != null) {
                            multipartBody.addFormDataPart(key, file.getName(),
                                    RequestBody.create(file,
                                            MediaType.parse(TiMimeTypeHelper.getMimeType(file.getAbsolutePath()))
                                    ));
                        } else {
                            Log.e(LCAT, "Error adding file");
                        }
                        break;
                    }

                    // normal key/value
                    String str = TiConvert.toString(value);
                    multipartBody.addFormDataPart(key, str);
                }
            }
            body = multipartBody.build();
        } else {
            MediaType JSON = MediaType.parse("application/json");
            body = RequestBody.create(postBody, JSON);
        }
        Request request = parseRequest(data, body);

        clientBuilder.build().newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, IOException e) {
                createErrorEvent(e);
            }

            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                if (response.isSuccessful()) {
                    createReturnEvent(response.headers(), response.body(), response, data);
                } else {
                    if (clbError != null) {
                        clbError.callAsync(getKrollObject(), new KrollDict());
                    }
                    fireEvent("error", new KrollDict());
                }
            }
        });
    }

    private void createFileFromBlob(TiBlob blob, File file) throws IOException {
        BufferedInputStream bufferedInput = new BufferedInputStream(blob.getInputStream());
        BufferedOutputStream bufferedOutput = new BufferedOutputStream(new FileOutputStream(file));

        byte[] buffer = new byte[1024 * 1024 * 8]; // 8MB buffer
        int available = -1;
        while ((available = bufferedInput.read(buffer)) > 0) {
            bufferedOutput.write(buffer, 0, available);
        }

        bufferedOutput.flush();
        bufferedOutput.close();
        bufferedInput.close();
    }
}
