/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Titanium SDK
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.okhttp;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiConvert;
import org.json.JSONObject;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;


@Kroll.module(name = "TiOkhttp", id = "ti.okhttp")
public class TiOkhttpModule extends KrollModule {

    // Standard Debugging variables
    private static final String LCAT = "TiOkhttpModule";
    private static final boolean DBG = TiConfig.LOGD;
    private final OkHttpClient client = new OkHttpClient();

    public TiOkhttpModule() {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
    }

    // Methods
    @Kroll.method
    public void get(KrollDict data) {
        Request.Builder requestBuilder = new Request.Builder()
                .header("User-Agent", "Titanium OkHttp")
                .url(data.getString("url"));

        if (data.containsKeyAndNotNull("header")) {
            Map<String, String> headerData = (HashMap) data.get("header");
            for (Map.Entry<String, String> item : headerData.entrySet()) {
                requestBuilder.addHeader(item.getKey(), item.getValue());
            }
        }

        Request request = requestBuilder.build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                Log.e(LCAT, e.toString());
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (!response.isSuccessful()) {
                        Log.e(LCAT, response.toString());
                    }

                    Headers responseHeaders = response.headers();
                    KrollDict output = new KrollDict();
                    output.put("header", responseHeaders.toString());
                    output.put("body", responseBody.string());
                    output.put("protocol", response.protocol().toString());
                    fireEvent("data", output);
                } catch (Exception exception) {
                    Log.e(LCAT, exception.toString());
                }
            }
        });
    }

    @Kroll.method
    public void post(KrollDict data) {
        MediaType JSON = MediaType.parse("application/json");
        String postBody = "";
        if (data.get("data") instanceof HashMap) {
            postBody = TiConvert.toJSON((HashMap<String, Object>) data.get("data")).toString();
        } else {
            postBody = data.getString("data");
        }

        Log.i(LCAT, postBody);
        Request.Builder requestBuilder = new Request.Builder()
                .header("User-Agent", "Titanium OkHttp")
                .url(data.getString("url"));

        if (data.containsKeyAndNotNull("header")) {
            Map<String, String> headerData = (HashMap) data.get("header");
            for (Map.Entry<String, String> item : headerData.entrySet()) {
                if (item.getKey().equals("Content-Type")) {
                    JSON = MediaType.parse(item.getValue());
                }
                requestBuilder.addHeader(item.getKey(), item.getValue());
            }
        }

        RequestBody body = RequestBody.create(postBody, JSON);
        Request request = requestBuilder.url(data.getString("url"))
                .post(body)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                Log.e(LCAT, e.toString());
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                Headers responseHeaders = response.headers();
                KrollDict output = new KrollDict();
                output.put("header", responseHeaders.toString());
                output.put("body", response.body().string());
                output.put("protocol", response.protocol().toString());
                fireEvent("data", output);
            }
        });
    }
}

